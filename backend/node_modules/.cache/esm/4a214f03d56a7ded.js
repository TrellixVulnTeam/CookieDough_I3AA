let express,bodyParser,cors,dotenv,morgan,User,colName,handleError,authRoutes,cookieRoutes,cartRoutes,isLoggedIn,isCorrectUser;_d56‍.w("express",[["default",["express"],function(v){express=v}]]);_d56‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_d56‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_d56‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_d56‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_d56‍.w("./models",[["User",["User"],function(v){User=v}]]);_d56‍.w("./models/UserSchema",[["colName",["colName"],function(v){colName=v}]]);_d56‍.w("./handlers/error",[["default",["handleError"],function(v){handleError=v}]]);_d56‍.w("./routes/auth",[["default",["authRoutes"],function(v){authRoutes=v}]]);_d56‍.w("./routes/cookie",[["default",["cookieRoutes"],function(v){cookieRoutes=v}]]);_d56‍.w("./routes/cart",[["default",["cartRoutes"],function(v){cartRoutes=v}]]);_d56‍.w("./middlewares/auth",[["isLoggedIn",["isLoggedIn"],function(v){isLoggedIn=v}],["isCorrectUser",["isCorrectUser"],function(v){isCorrectUser=v}]]);












dotenv.config({path: '../.env'});

const PORT = process.env.PORT_BACKEND;
const app = express();

app.use(cors());
app.use(morgan('tiny'));
app.use(bodyParser.json());
app.use('/user/auth/', authRoutes);
app.use('/cookie/', cookieRoutes);
app.use('/user/:id/cart/', isLoggedIn,isCorrectUser, cartRoutes);

// app.get('/', (req, res, next) => {
// 	User.deleteOne({[colName.EMAIL]: 'a@b.com'}).then(() => {
// 		User.create({
// 			[colName.EMAIL]: 'a@b.com',
// 			[colName.NAME]: 'a b',
// 			[colName.PASSWORD]: 'ertyui'
// 		})
// 		.then(() => {
// 			User.find({
// 				[colName.EMAIL]: 'a@b.com',
// 			})
// 			.then((resp) => {
// 				console.log('hi', resp);
// 			})
// 		});
// 	})

// })

app.use(handleError);

app.listen(PORT, () => {
	console.log(`Listening on Port: ${PORT}`);
})
